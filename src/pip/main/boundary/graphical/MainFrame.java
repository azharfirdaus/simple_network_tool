/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pip.main.boundary.graphical;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.UIManager;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import pip.app.gateaway.InternetProtocol;
import pip.app.gateaway.NetworkConfigurationPresenter;
import pip.app.process.NotInvokedProcessYetException;
import pip.app.process.ProcessInvokerImpl;
import pip.main.adapter.CommandAdapter;
import pip.main.adapter.CommandListener;
import pip.main.boundary.textual.IODelivery;

/**
 *
 * @author User
 */
public class MainFrame extends javax.swing.JFrame implements ChangeAcceptor{
    private final CommandListener listener;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        listener = new CommandAdapter(this);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tabbed_panel_central = new javax.swing.JTabbedPane();
        panel_hosts = new javax.swing.JTabbedPane();
        panel_interfaces = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_detail = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        button_refresh = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        list_interfaces = new javax.swing.JList<>();
        button_details = new javax.swing.JButton();
        panel_all_hosts = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_all_hosts = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        button_ping_all = new javax.swing.JButton();
        button_refresh_ping = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(400, 300));

        tabbed_panel_central.addTab("all hosts", panel_hosts);

        panel_interfaces.setLayout(new java.awt.BorderLayout());

        table_detail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"identifier", null},
                {"physical", null},
                {"host", null},
                {"network", null},
                {"netmask", null},
                {"broadcast", null},
                {"host v6", null},
                {"netmask v6", null},
                {"broadcast v6", null}
            },
            new String [] {
                "Name", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(table_detail);

        panel_interfaces.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        button_refresh.setText("Refresh");
        button_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_refreshActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel1.add(button_refresh, gridBagConstraints);

        jScrollPane3.setViewportView(list_interfaces);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel1.add(jScrollPane3, gridBagConstraints);

        button_details.setText("Detail...");
        button_details.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_detailsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        jPanel1.add(button_details, gridBagConstraints);

        panel_interfaces.add(jPanel1, java.awt.BorderLayout.WEST);

        tabbed_panel_central.addTab("interfaces", panel_interfaces);

        panel_all_hosts.setLayout(new java.awt.BorderLayout());

        table_all_hosts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "host", "status"
            }
        ));
        jScrollPane1.setViewportView(table_all_hosts);

        panel_all_hosts.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        button_ping_all.setText("Ping All");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        jPanel2.add(button_ping_all, gridBagConstraints);

        button_refresh_ping.setText("Refresh");
        button_refresh_ping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_refresh_pingActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel2.add(button_refresh_ping, gridBagConstraints);

        panel_all_hosts.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        tabbed_panel_central.addTab("all hosts", panel_all_hosts);

        getContentPane().add(tabbed_panel_central, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_refreshActionPerformed
        // TODO add your handling code here:
        IODelivery io = new IODelivery();
        try {
            listener.callInteractor("interfaces");
        } catch (IOException | NotInvokedProcessYetException | CommandAdapter.CommandIsNotFoundException | InternetProtocol.InvalidIpAdderssV4FormatException | CommandAdapter.EmptyCommandFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button_refreshActionPerformed

    private void button_detailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_detailsActionPerformed
        // TODO add your handling code here:
        try {
            listener.callInteractor("network_card_conf",
                    list_interfaces.getModel().getElementAt(list_interfaces.getSelectedIndex()));
        } catch (IOException | NotInvokedProcessYetException | CommandAdapter.CommandIsNotFoundException | InternetProtocol.InvalidIpAdderssV4FormatException | CommandAdapter.EmptyCommandFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button_detailsActionPerformed

    private void button_refresh_pingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_refresh_pingActionPerformed
        try {
            // TODO add your handling code here:
            listener.callInteractor("list_hosts","192.168.1.0","255.255.255.0");
        } catch (IOException | NotInvokedProcessYetException | CommandAdapter.CommandIsNotFoundException | InternetProtocol.InvalidIpAdderssV4FormatException | CommandAdapter.EmptyCommandFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button_refresh_pingActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_details;
    private javax.swing.JButton button_ping_all;
    private javax.swing.JButton button_refresh;
    private javax.swing.JButton button_refresh_ping;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> list_interfaces;
    private javax.swing.JPanel panel_all_hosts;
    private javax.swing.JTabbedPane panel_hosts;
    private javax.swing.JPanel panel_interfaces;
    private javax.swing.JTabbedPane tabbed_panel_central;
    private javax.swing.JTable table_all_hosts;
    private javax.swing.JTable table_detail;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onDisplayNetworkInterfaceIdentifier(Object[] identifiers) {
        DefaultListModel model = new DefaultListModel();
        for(Object obj: identifiers)
            model.addElement(obj.toString());
        list_interfaces.setModel(model);
    }

    @Override
    public void onDetailNetworkInterfaceIdentifier(NetworkConfigurationPresenter presenter) {
        Object model[][] = {
            {"identifier", presenter.interfaceIdentifier()},
            {"physical", presenter.physicalAddress()},
            {"host", presenter.host.toString()},
            {"network", presenter.network.toString()},
            {"netmask", presenter.netmask.toString()},
            {"broadcast", presenter.broadcast.toString()},
            {"host v6", presenter.hostV6()},
            {"netmask v6", presenter.netmaskV6()},
            {"broadcast v6", presenter.broadcastV6()},
        };
        String columnNames[] = {"Name", "Value"};
        table_detail.setModel(new DefaultTableModel(model, columnNames));
    }

    @Override
    public void onDisplayAllHosts(Object hosts[]) {
        
        table_all_hosts.setModel(new AbstractTableModel() {
            
            private final  String[] columns = {"host", "status"};
            
            @Override
            public int getColumnCount(){
                return columns.length;
            }
            
            @Override
            public String getColumnName(int index){
                return columns[index];
            }
            
            @Override
            public int getRowCount() {
                return hosts.length;
            }

            @Override
            public Object getValueAt(int rowIndex, int columnIndex) {
                switch(columnIndex){
                    case 0:
                        return hosts[rowIndex].toString();
                    case 1:
                        return "Unverified";
                    default:
                        return "";
                }
            }
        });
        
    }
}
